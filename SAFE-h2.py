import sys
import subprocess
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.font_manager as font_manager
import os
import os.path
from os import path
import pathlib
import shutil
from pathlib import Path
import pyfiglet
from rich import print
from sys import argv
import time
import pylab



title = pyfiglet.figlet_format('SAFE-h2', font='doom', width=100)
print(f'[white]{title}[/white]')

print('performs "dynamic Snp Allocation For Estimating narrow-sense Heritability".............')
print('This version is version_2023a.')



Prog1 = pathlib.Path("emmax")
pro11 = "Emmax model will be used to estimate the heritability."
pro12 = "Emmax_prog not found. To apply Emmax_model, please provide the EMMAX program (binary file) renamed as: emmax"
Prog2 = pathlib.Path("ldak")
pro21 = "Ldak GCTA_model will be used to estimate the heritability."
pro22 = "Ldak Thin_model will be used to estimate the heritability."
pro23 = "Ldak_prog not found. To apply Ldak GCTA and Thin models, please provide the LDAK program (binary file) renamed as: ldak"

Prog3 = pathlib.Path("gcta")
pro31 = "GCTA-GREML model will be used to estimate the heritability."
pro32 = "GCTA-GREML_prog not found. To apply GCTA-GREML_model, please provide the GCTA-GREML program (binary file) renamed as: gcta"


Prog1_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog1_select_act = Prog1_select['Impl_status_Emmax']
Prog1_select_act.to_csv('Prog1_select_act.txt', header=False, index=False)

Prog2_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog2_select_act = Prog2_select['Impl_status_LdakGCTA']
Prog2_select_act.to_csv('Prog2_select_act.txt', header=False, index=False)

Prog3_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog3_select_act = Prog3_select['Impl_status_LdakThin']
Prog3_select_act.to_csv('Prog3_select_act.txt', header=False, index=False)

Prog4_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog4_select_act = Prog4_select['Impl_status_GCTA-GREML']
Prog4_select_act.to_csv('Prog4_select_act.txt', header=False, index=False)

Prog6_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog6_select_act = Prog6_select['PURE_Effects']
Prog6_select_act.to_csv('Prog6_select_act.txt', header=False, index=False)

valueA = '1'  
valueAa = '0'
valueB = '1'
valueBb = '0'
valueC = '1'
valueCc = '0'
valueD = '1'  
valueDd = '0'
valueDdd = '2'
valueEe = '0'
valueEee = '1'
valueFf = '0'
valueFff = '1'

        
if Prog1.exists () or Prog2.exists () or Prog3.exists ():
    print('SAFE-h2 initiates the analysis...')
    if Prog1.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(pro11)
            elif valueAa in lineA:
                print('Emmax model will not be used to estimate the heritability.')

    else:
        print(pro12)

    if Prog2.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(pro21)
            elif valueBb in lineB:
                print('Ldak GCTA_model will not be used to estimate the heritability.')
    else:
        print(pro23)
        

    if Prog2.exists ():
        with open("Prog3_select_act.txt", "a+") as ActC:
            ActC.seek(0) # set position to start of file
            lineC = ActC.read().splitlines()
            if valueC in lineC:
                print(pro22)
            elif valueCc in lineC:
                print('Ldak Thin_model will not be used to estimate the heritability.')




    if Prog3.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(pro31)
            elif valueDd in lineD:
                print('GCTA-GREML model will not be used to estimate the heritability.')
            elif valueDdd in lineD:
                print('GCTA-GREML-inbred model will be used to estimate the heritability.')
    else:
       print(pro32)

else:
    print('SAFE-h2 stops working: neither of the programs, i.e., emmax, ldak, or gcta, exists!')
    exit()

print('SAFE-h2 continues...checking for inputs')

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam_check = pathlib.Path("MAIN.fam")
fam1 = "Main.fam is harvested"
fam2 = "SAFE-h2 stops working: Main.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

Covar_e_check = pathlib.Path("Covar_emmax")
Coe1 = "The covariate file will be included in the analysis by Emmax model."
Coe2 = "Emmax model will be implemented without covariates."
Covar_l_check = pathlib.Path("Covar_ldak")
Col1 = "The covariate file will be included in the analysis by Ldak models."
Col2 = "Ldak models will be implemented without covariates."
Covar_qg_check = pathlib.Path("qCovar_greml")
Covar_cg_check = pathlib.Path("Covar_greml")
Coqg1 = "The quantitative-covariate file will be included in the analysis by GCTA-GREML model."
Cocg1 = "The categorical-covariate file will be included in the analysis by GCTA-GREML model."
Cog = "GCTA-GREML model will be implemented without covariates."
Coqg2 = "The quantitative-covariate file will be included in the analysis by GCTA-GREML-inbred model."
Cocg2 = "The categorical-covariate file will be included in the analysis by GCTA-GREML-inbred model."
Cog2 = "GCTA-GREML-inbred model will be implemented without covariates."

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                

pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())








CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())




                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)


                







print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p; mkdir SAFE-h2_input_files; mkdir SAFE-h2_output_files; mkdir SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* SAFE-h2_input_files; mv MAIN.bim SAFE-h2_input_files; mv MAIN.bed SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "rm Prog*_select_act.txt"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mv MAIN.fam SAFE-h2_input_files; mv MainPs* SAFE-h2_input_files; mv outfile_* SAFE-h2_output_files; mv outfileY* SAFE-h2_output_files; mv Number_of* SAFE-h2_output_files; mv list* SAFE-h2_output_files; mv *.pdf SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
final = pyfiglet.figlet_format('SAFE-h2', font='doom', width=100)

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        print('SAFE-h2 continues...checking for inputs')
    else:
        print(f'[white]{final}[/white]')

        print('"has completed the analyses. The SAFE-h2 version is 2023a."')

        print('SAFE-h2 Citation: Behrooz Darbani, Mogens Nicolaisen. SNP Allocation For Estimating Heritability (SAFE-h2): A tool to explore genomic origins of phenotypes for estimation of SNP heritability using additive-only allelic effects or additive and non-additive allelic effects.')

        print('PLINK Citation: GigaScience 2015Dec;4(1):s13742-015-0047-8 (doi:https://doi.org/10.1186/s13742-015-0047-8)')

        print('Also cite Nat Genet.2010Apr;42(4):348-54.doi:10.1038/ng.548 ... if using EMMAX model')
        print('Also cite Am J Hum Genet.2012Dec7;91(6):1011-21.doi:10.1016/j.ajhg.2012.10.010 ... if using LDAK models')
        print('Also cite Nat Genet.2010Jul;42(7):565-9.doi:10.1038/ng.608 ... if using GCTA-GREML model')
        

bed_check = pathlib.Path("MAIN.bed")

if bed_check.exists ():
    print('SAFE-h2 is working on the Random Phenotypes!')
else:
    command = "rm Prog*_select_act.txt"
    ret = subprocess.run(command, capture_output=True, shell=True)
    # before Python 3.7:
    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
    print(ret.stdout.decode())
    exit()










     
                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN1.fam")
fam1 = "Main1.fam is harvested"
fam2 = "SAFE-h2 stops working: Main1.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN1.fam MAIN.fam; ren Main1Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())




CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())



                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)



                







print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP1_SAFE-h2_input_files; mkdir RP1_SAFE-h2_output_files; mkdir RP1_SAFE-h2_output_figures; mv MAIN.fam RP1_SAFE-h2_input_files; mv MainPs* RP1_SAFE-h2_input_files; mv outfile_* RP1_SAFE-h2_output_files; mv outfileY* RP1_SAFE-h2_output_files; mv Number_of* RP1_SAFE-h2_output_files; mv list* RP1_SAFE-h2_output_files; mv *.pdf RP1_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* RP1_SAFE-h2_input_files; mv MAIN.bim RP1_SAFE-h2_input_files; mv MAIN.bed RP1_SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                





                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN2.fam")
fam1 = "Main2.fam is harvested"
fam2 = "SAFE-h2 stops working: Main2.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN2.fam MAIN.fam; ren Main2Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())





CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())



                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)










print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP2_SAFE-h2_input_files; mkdir RP2_SAFE-h2_output_files; mkdir RP2_SAFE-h2_output_figures; mv MAIN.fam RP2_SAFE-h2_input_files; mv MainPs* RP2_SAFE-h2_input_files; mv outfile_* RP2_SAFE-h2_output_files; mv outfileY* RP2_SAFE-h2_output_files; mv Number_of* RP2_SAFE-h2_output_files; mv list* RP2_SAFE-h2_output_files; mv *.pdf RP2_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* RP2_SAFE-h2_input_files; mv MAIN.bim RP2_SAFE-h2_input_files; mv MAIN.bed RP2_SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                







                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN3.fam")
fam1 = "Main3.fam is harvested"
fam2 = "SAFE-h2 stops working: Main3.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN3.fam MAIN.fam; ren Main3Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())





CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())





                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)






print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP3_SAFE-h2_input_files; mkdir RP3_SAFE-h2_output_files; mkdir RP3_SAFE-h2_output_figures; mv MAIN.fam RP3_SAFE-h2_input_files; mv MainPs* RP3_SAFE-h2_input_files; mv outfile_* RP3_SAFE-h2_output_files; mv outfileY* RP3_SAFE-h2_output_files; mv Number_of* RP3_SAFE-h2_output_files; mv list* RP3_SAFE-h2_output_files; mv *.pdf RP3_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* RP2_SAFE-h2_input_files; mv MAIN.bim RP2_SAFE-h2_input_files; mv MAIN.bed RP2_SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                






                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN4.fam")
fam1 = "Main4.fam is harvested"
fam2 = "SAFE-h2 stops working: Main4.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN4.fam MAIN.fam; ren Main4Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())





CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())







                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)


                







print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP4_SAFE-h2_input_files; mkdir RP4_SAFE-h2_output_files; mkdir RP4_SAFE-h2_output_figures; mv MAIN.fam RP4_SAFE-h2_input_files; mv MainPs* RP4_SAFE-h2_input_files; mv outfile_* RP4_SAFE-h2_output_files; mv outfileY* RP4_SAFE-h2_output_files; mv Number_of* RP4_SAFE-h2_output_files; mv list* RP4_SAFE-h2_output_files; mv *.pdf RP4_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* RP2_SAFE-h2_input_files; mv MAIN.bim RP2_SAFE-h2_input_files; mv MAIN.bed RP2_SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                





                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN5.fam")
fam1 = "Main5.fam is harvested"
fam2 = "SAFE-h2 stops working: Main5.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN5.fam MAIN.fam; ren Main5Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())





CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())







                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)



                







print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP5_SAFE-h2_input_files; mkdir RP5_SAFE-h2_output_files; mkdir RP5_SAFE-h2_output_figures; mv MAIN.fam RP5_SAFE-h2_input_files; mv MainPs* RP5_SAFE-h2_input_files; mv outfile_* RP5_SAFE-h2_output_files; mv outfileY* RP5_SAFE-h2_output_files; mv Number_of* RP5_SAFE-h2_output_files; mv list* RP5_SAFE-h2_output_files; mv *.pdf RP5_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFf in lineF:
        command = "mv *Covar* RP2_SAFE-h2_input_files; mv MAIN.bim RP2_SAFE-h2_input_files; mv MAIN.bed RP2_SAFE-h2_input_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                










                
print('SAFE-h2 is working on the Random Phenotypes!')
        

bed_check = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam1_check = pathlib.Path("MAIN6.fam")
fam1 = "Main6.fam is harvested"
fam2 = "SAFE-h2 stops working: Main6.fam not found!"
bim_check = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam1_check.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check.exists ():
    print(bim1)
else:
    print(bim2)
    exit()


   

if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)

                


command = "ren MAIN6.fam MAIN.fam; ren Main6Ps MainPs"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



pvalue_check = pathlib.Path("MainPs")

pvalue1 = "The file containing pvalues, i.e., MainPs, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs, not found!"

if pvalue_check.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()


columns = ['ID', 'beta', 'pvalue']
df = pd.read_csv("MainPs", header=None, sep='\t', names=columns)


ZZZ = len(df[df['pvalue']>1]) 
print('Number of incorrect p_values')
print(ZZZ)


if ZZZ>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()
    

ppp = df.pvalue
No_pvalues = len(ppp)

sss = df.ID
No_sss = len(sss)



if No_sss == No_pvalues:
   print('Number of SNPs/p_values =')
   print(No_pvalues)
else:
    print('No. of p_values =')
    print(No_pvalues)
    print('No. of SNPs =')
    print(No_sss)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs file!')
    exit()







pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')







with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())



print(' "SNP profiling based on their pvalues"...')


df1 = df.loc[df['pvalue'] < 0.0000001]
df1_1 = df1.iloc[:,0]
with open('list1p', 'a') as out_file1:
    out_file1.write(df1_1.to_csv(header=None,index=False))


df2 = df.loc[df['pvalue'] < 0.000001]
df2_2 = df2.iloc[:,0]
with open('list2p', 'a') as out_file2:
    out_file2.write(df2_2.to_csv(header=None,index=False))


df3 = df.loc[df['pvalue'] < 0.00001]
df3_3 = df3.iloc[:,0]
with open('list3p', 'a') as out_file3:
    out_file3.write(df3_3.to_csv(header=None,index=False))


df4 = df.loc[df['pvalue'] < 0.0001]
df4_4 = df4.iloc[:,0]
with open('list4p', 'a') as out_file4:
    out_file4.write(df4_4.to_csv(header=None,index=False))
    
    
df5 = df.loc[df['pvalue'] < 0.001]
df5_5 = df5.iloc[:,0]
with open('list5p', 'a') as out_file5:
    out_file5.write(df5_5.to_csv(header=None,index=False))


df6 = df.loc[df['pvalue'] < 0.01]
df6_6 = df6.iloc[:,0]
with open('list6p', 'a') as out_file6:
    out_file6.write(df6_6.to_csv(header=None,index=False))


df7 = df.loc[df['pvalue'] < 0.1]
df7_7 = df7.iloc[:,0]
with open('list7p', 'a') as out_file7:
    out_file7.write(df7_7.to_csv(header=None,index=False))


df8 = df.loc[df['pvalue'] < 0.2]
df8_8 = df8.iloc[:,0]
with open('list8p', 'a') as out_file8:
    out_file8.write(df8_8.to_csv(header=None,index=False))


df9 = df.loc[df['pvalue'] < 0.25]
df9_9 = df9.iloc[:,0]
with open('list9p', 'a') as out_file9:
    out_file9.write(df9_9.to_csv(header=None,index=False))


df10 = df.loc[df['pvalue'] < 0.3]
df10_10 = df10.iloc[:,0]
with open('list10p', 'a') as out_file10:
    out_file10.write(df10_10.to_csv(header=None,index=False))


df11 = df.loc[df['pvalue'] < 0.4]
df11_11 = df11.iloc[:,0]
with open('list11p', 'a') as out_file11:
    out_file11.write(df11_11.to_csv(header=None,index=False))


df12 = df.loc[df['pvalue'] < 0.5]
df12_12 = df12.iloc[:,0]
with open('list12p', 'a') as out_file12:
    out_file12.write(df12_12.to_csv(header=None,index=False))


df13 = df.loc[df['pvalue'] < 0.6]
df13_13 = df13.iloc[:,0]
with open('list13p', 'a') as out_file13:
    out_file13.write(df13_13.to_csv(header=None,index=False))


df14 = df.loc[df['pvalue'] < 0.7]
df14_14 = df14.iloc[:,0]
with open('list14p', 'a') as out_file14:
    out_file14.write(df14_14.to_csv(header=None,index=False))

 
df15 = df.loc[df['pvalue'] < 0.75]
df15_15 = df15.iloc[:,0]
with open('list15p', 'a') as out_file15:
    out_file15.write(df15_15.to_csv(header=None,index=False))


df16 = df.loc[df['pvalue'] < 0.8]
df16_16 = df16.iloc[:,0]
with open('list16p', 'a') as out_file16:
    out_file16.write(df16_16.to_csv(header=None,index=False))


df17 = df.loc[df['pvalue'] < 0.9]
df17_17 = df17.iloc[:,0]
with open('list17p', 'a') as out_file17:
    out_file17.write(df17_17.to_csv(header=None,index=False))


df18 = df.loc[df['pvalue'] < 0.95]
df18_18 = df18.iloc[:,0]
with open('list18p', 'a') as out_file18:
    out_file18.write(df18_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p > list1; awk '!x[$0]++' list2p > list2; awk '!x[$0]++' list3p > list3; awk '!x[$0]++' list4p > list4; awk '!x[$0]++' list5p > list5; awk '!x[$0]++' list6p > list6; awk '!x[$0]++' list7p > list7; awk '!x[$0]++' list8p > list8; awk '!x[$0]++' list9p > list9; awk '!x[$0]++' list10p > list10; awk '!x[$0]++' list11p > list11; awk '!x[$0]++' list12p > list12; awk '!x[$0]++' list13p > list13; awk '!x[$0]++' list14p > list14; awk '!x[$0]++' list15p > list15; awk '!x[$0]++' list16p > list16; awk '!x[$0]++' list17p > list17; awk '!x[$0]++' list18p > list18"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






            

fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")





list1co = sum(1 for line in open('list1'))
list2co = sum(1 for line in open('list2'))
list3co = sum(1 for line in open('list3'))
list4co = sum(1 for line in open('list4'))
list5co = sum(1 for line in open('list5'))
list6co = sum(1 for line in open('list6'))
list7co = sum(1 for line in open('list7'))
list8co = sum(1 for line in open('list8'))
list9co = sum(1 for line in open('list9'))
list10co = sum(1 for line in open('list10'))
list11co = sum(1 for line in open('list11'))
list12co = sum(1 for line in open('list12'))
list13co = sum(1 for line in open('list13'))
list14co = sum(1 for line in open('list14'))
list15co = sum(1 for line in open('list15'))
list16co = sum(1 for line in open('list16'))
list17co = sum(1 for line in open('list17'))
list18co = sum(1 for line in open('list18'))


with open('Number_of_pvalues1', 'a') as out_pvalue:
    out_pvalue.write(str(list1co))

with open('Number_of_pvalues2', 'a') as out_pvalue:
    out_pvalue.write(str(list2co))
    
with open('Number_of_pvalues3', 'a') as out_pvalue:
    out_pvalue.write(str(list3co))
    
with open('Number_of_pvalues4', 'a') as out_pvalue:
    out_pvalue.write(str(list4co))
    
with open('Number_of_pvalues5', 'a') as out_pvalue:
    out_pvalue.write(str(list5co))
    
with open('Number_of_pvalues6', 'a') as out_pvalue:
    out_pvalue.write(str(list6co))
    
with open('Number_of_pvalues7', 'a') as out_pvalue:
    out_pvalue.write(str(list7co))
    
with open('Number_of_pvalues8', 'a') as out_pvalue:
    out_pvalue.write(str(list8co))

with open('Number_of_pvalues9', 'a') as out_pvalue:
    out_pvalue.write(str(list9co))
    
with open('Number_of_pvalues10', 'a') as out_pvalue:
    out_pvalue.write(str(list10co))
    
with open('Number_of_pvalues11', 'a') as out_pvalue:
    out_pvalue.write(str(list11co))
    
with open('Number_of_pvalues12', 'a') as out_pvalue:
    out_pvalue.write(str(list12co))
    
with open('Number_of_pvalues13', 'a') as out_pvalue:
    out_pvalue.write(str(list13co))
    
with open('Number_of_pvalues14', 'a') as out_pvalue:
    out_pvalue.write(str(list14co))
    
with open('Number_of_pvalues15', 'a') as out_pvalue:
    out_pvalue.write(str(list15co))
    
with open('Number_of_pvalues16', 'a') as out_pvalue:
    out_pvalue.write(str(list16co))
    
with open('Number_of_pvalues17', 'a') as out_pvalue:
    out_pvalue.write(str(list17co))
    
with open('Number_of_pvalues18', 'a') as out_pvalue:
    out_pvalue.write(str(list18co))
    
with open('Number_of_pvalues19', 'a') as out_pvalue:
    out_pvalue.write(str(No_pvalues))
    







file = pathlib.Path("Number_of_pvalues1")
if file.exists ():
    with open("Number_of_pvalues1", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2")
if file.exists ():
    with open("Number_of_pvalues2", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3")
if file.exists ():
    with open("Number_of_pvalues3", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4")
if file.exists ():
    with open("Number_of_pvalues4", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5")
if file.exists ():
    with open("Number_of_pvalues5", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6")
if file.exists ():
    with open("Number_of_pvalues6", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7")
if file.exists ():
    with open("Number_of_pvalues7", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8")
if file.exists ():
    with open("Number_of_pvalues8", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")




file = pathlib.Path("Number_of_pvalues9")
if file.exists ():
    with open("Number_of_pvalues9", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10")
if file.exists ():
    with open("Number_of_pvalues10", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11")
if file.exists ():
    with open("Number_of_pvalues11", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12")
if file.exists ():
    with open("Number_of_pvalues12", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13")
if file.exists ():
    with open("Number_of_pvalues13", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14")
if file.exists ():
    with open("Number_of_pvalues14", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15")
if file.exists ():
    with open("Number_of_pvalues15", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16")
if file.exists ():
    with open("Number_of_pvalues16", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17")
if file.exists ():
    with open("Number_of_pvalues17", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18")
if file.exists ():
    with open("Number_of_pvalues18", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19")
if file.exists ():
    with open("Number_of_pvalues19", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")








        







 
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles"...')
            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


        
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1; ./emmax-kin -v -d 10 SUBSET_E2; ./emmax-kin -v -d 10 SUBSET_E3; ./emmax-kin -v -d 10 SUBSET_E4; ./emmax-kin -v -d 10 SUBSET_E5; ./emmax-kin -v -d 10 SUBSET_E6; ./emmax-kin -v -d 10 SUBSET_E7; ./emmax-kin -v -d 10 SUBSET_E8; ./emmax-kin -v -d 10 SUBSET_E9; ./emmax-kin -v -d 10 SUBSET_E10; ./emmax-kin -v -d 10 SUBSET_E11; ./emmax-kin -v -d 10 SUBSET_E12; ./emmax-kin -v -d 10 SUBSET_E13; ./emmax-kin -v -d 10 SUBSET_E14; ./emmax-kin -v -d 10 SUBSET_E15; ./emmax-kin -v -d 10 SUBSET_E16; ./emmax-kin -v -d 10 SUBSET_E17; ./emmax-kin -v -d 10 SUBSET_E18; ./emmax-kin -v -d 10 MAIN_E"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())






CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -c Covar_emmax -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E1 -p Phenotype -k SUBSET_E1.BN.kinf -o SUBSET_E1"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -c Covar_emmax -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E2 -p Phenotype -k SUBSET_E2.BN.kinf -o SUBSET_E2"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -c Covar_emmax -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E3 -p Phenotype -k SUBSET_E3.BN.kinf -o SUBSET_E3"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -c Covar_emmax -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E4 -p Phenotype -k SUBSET_E4.BN.kinf -o SUBSET_E4"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -c Covar_emmax -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E5 -p Phenotype -k SUBSET_E5.BN.kinf -o SUBSET_E5"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -c Covar_emmax -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E6 -p Phenotype -k SUBSET_E6.BN.kinf -o SUBSET_E6"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -c Covar_emmax -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E7 -p Phenotype -k SUBSET_E7.BN.kinf -o SUBSET_E7"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -c Covar_emmax -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E8 -p Phenotype -k SUBSET_E8.BN.kinf -o SUBSET_E8"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -c Covar_emmax -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E9 -p Phenotype -k SUBSET_E9.BN.kinf -o SUBSET_E9"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -c Covar_emmax -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E10 -p Phenotype -k SUBSET_E10.BN.kinf -o SUBSET_E10"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -c Covar_emmax -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E11 -p Phenotype -k SUBSET_E11.BN.kinf -o SUBSET_E11"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -c Covar_emmax -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E12 -p Phenotype -k SUBSET_E12.BN.kinf -o SUBSET_E12"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -c Covar_emmax -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E13 -p Phenotype -k SUBSET_E13.BN.kinf -o SUBSET_E13"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -c Covar_emmax -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E14 -p Phenotype -k SUBSET_E14.BN.kinf -o SUBSET_E14"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -c Covar_emmax -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E15 -p Phenotype -k SUBSET_E15.BN.kinf -o SUBSET_E15"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -c Covar_emmax -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E16 -p Phenotype -k SUBSET_E16.BN.kinf -o SUBSET_E16"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -c Covar_emmax -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E17 -p Phenotype -k SUBSET_E17.BN.kinf -o SUBSET_E17"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -c Covar_emmax -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t SUBSET_E18 -p Phenotype -k SUBSET_E18.BN.kinf -o SUBSET_E18"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E.ps")

with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -c Covar_emmax -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates"...')
                command = "./emmax -v -d 10 -t MAIN_E -p Phenotype -k MAIN_E.BN.kinf -o MAIN_E"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















    

if Prog2.exists () or Prog3.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles"...')
                command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...')
                    command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                            

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...')
                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18 --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())






                            
            
 
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model"...')
            command = "./ldak --calc-kins-direct SUBSET_L1 --bfile SUBSET_L1 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2 --bfile SUBSET_L2 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3 --bfile SUBSET_L3 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4 --bfile SUBSET_L4 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5 --bfile SUBSET_L5 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6 --bfile SUBSET_L6 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7 --bfile SUBSET_L7 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8 --bfile SUBSET_L8 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9 --bfile SUBSET_L9 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10 --bfile SUBSET_L10 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11 --bfile SUBSET_L11 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12 --bfile SUBSET_L12 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13 --bfile SUBSET_L13 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14 --bfile SUBSET_L14 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15 --bfile SUBSET_L15 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16 --bfile SUBSET_L16 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17 --bfile SUBSET_L17 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18 --bfile SUBSET_L18 --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L --bfile MAIN --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --grm MAIN_L --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates"...')
                command = "./ldak --reml SUBSET_L1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm SUBSET_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm SUBSET_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm SUBSET_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm SUBSET_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm SUBSET_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm SUBSET_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm SUBSET_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm SUBSET_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm SUBSET_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm SUBSET_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm SUBSET_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm SUBSET_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm SUBSET_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm SUBSET_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm SUBSET_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm SUBSET_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm SUBSET_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm SUBSET_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm MAIN_L  --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())



    
    
with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model"...')
            command = "./ldak --thin thin_L1 --bfile SUBSET_L1 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2 --bfile SUBSET_L2 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3 --bfile SUBSET_L3 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4 --bfile SUBSET_L4 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5 --bfile SUBSET_L5 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6 --bfile SUBSET_L6 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7 --bfile SUBSET_L7 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8 --bfile SUBSET_L8 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9 --bfile SUBSET_L9 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10 --bfile SUBSET_L10 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11 --bfile SUBSET_L11 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12 --bfile SUBSET_L12 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13 --bfile SUBSET_L13 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14 --bfile SUBSET_L14 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15 --bfile SUBSET_L15 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16 --bfile SUBSET_L16 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17 --bfile SUBSET_L17 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18 --bfile SUBSET_L18 --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN --bfile MAIN --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1.in '{print $1, 1}' > weights_L1.thin; awk < thin_L2.in '{print $1, 1}' > weights_L2.thin; awk < thin_L3.in '{print $1, 1}' > weights_L3.thin; awk < thin_L4.in '{print $1, 1}' > weights_L4.thin; awk < thin_L5.in '{print $1, 1}' > weights_L5.thin; awk < thin_L6.in '{print $1, 1}' > weights_L6.thin; awk < thin_L7.in '{print $1, 1}' > weights_L7.thin; awk < thin_L8.in '{print $1, 1}' > weights_L8.thin; awk < thin_L9.in '{print $1, 1}' > weights_L9.thin; awk < thin_L10.in '{print $1, 1}' > weights_L10.thin; awk < thin_L11.in '{print $1, 1}' > weights_L11.thin; awk < thin_L12.in '{print $1, 1}' > weights_L12.thin; awk < thin_L13.in '{print $1, 1}' > weights_L13.thin; awk < thin_L14.in '{print $1, 1}' > weights_L14.thin; awk < thin_L15.in '{print $1, 1}' > weights_L15.thin; awk < thin_L16.in '{print $1, 1}' > weights_L16.thin; awk < thin_L17.in '{print $1, 1}' > weights_L17.thin; awk < thin_L18.in '{print $1, 1}' > weights_L18.thin; awk < thin_MAIN.in '{print $1, 1}' > weights_MAIN.thin; ./ldak --calc-kins-direct LDAK_Thin_L1 --bfile SUBSET_L1 --weights weights_L1.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2 --bfile SUBSET_L2 --weights weights_L2.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3 --bfile SUBSET_L3 --weights weights_L3.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4 --bfile SUBSET_L4 --weights weights_L4.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5 --bfile SUBSET_L5 --weights weights_L5.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6 --bfile SUBSET_L6 --weights weights_L6.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7 --bfile SUBSET_L7 --weights weights_L7.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8 --bfile SUBSET_L8 --weights weights_L8.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9 --bfile SUBSET_L9 --weights weights_L9.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10 --bfile SUBSET_L10 --weights weights_L10.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11 --bfile SUBSET_L11 --weights weights_L11.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12 --bfile SUBSET_L12 --weights weights_L12.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13 --bfile SUBSET_L13 --weights weights_L13.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14 --bfile SUBSET_L14 --weights weights_L14.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15 --bfile SUBSET_L15 --weights weights_L15.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16 --bfile SUBSET_L16 --weights weights_L16.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17 --bfile SUBSET_L17 --weights weights_L17.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18 --bfile SUBSET_L18 --weights weights_L18.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN --bfile MAIN --weights weights_MAIN.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included"...')
                command = "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --grm LDAK_Thin_L1 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --grm LDAK_Thin_L2 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --grm LDAK_Thin_L3 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --grm LDAK_Thin_L4 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --grm LDAK_Thin_L5 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --grm LDAK_Thin_L6 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --grm LDAK_Thin_L7 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --grm LDAK_Thin_L8 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --grm LDAK_Thin_L9 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --grm LDAK_Thin_L10 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --grm LDAK_Thin_L11 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --grm LDAK_Thin_L12 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --grm LDAK_Thin_L13 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --grm LDAK_Thin_L14 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --grm LDAK_Thin_L15 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --grm LDAK_Thin_L16 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --grm LDAK_Thin_L17 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --grm LDAK_Thin_L18 --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --grm LDAK_Thin_MAIN --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates"...')
                command =  "./ldak --reml SUBSET_LT1 --pheno SUBSET_L1.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L1 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2 --pheno SUBSET_L2.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L2 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3 --pheno SUBSET_L3.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L3 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4 --pheno SUBSET_L4.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L4 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5 --pheno SUBSET_L5.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L5 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6 --pheno SUBSET_L6.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L6 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7 --pheno SUBSET_L7.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L7 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8 --pheno SUBSET_L8.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L8 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9 --pheno SUBSET_L9.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L9 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10 --pheno SUBSET_L10.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L10 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11 --pheno SUBSET_L11.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L11 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12 --pheno SUBSET_L12.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L12 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13 --pheno SUBSET_L13.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L13 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14 --pheno SUBSET_L14.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L14 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15 --pheno SUBSET_L15.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L15 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16 --pheno SUBSET_L16.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L16 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17 --pheno SUBSET_L17.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L17 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18 --pheno SUBSET_L18.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_L18 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT --pheno MAIN.fam --mpheno 4 --max-threads 22 --grm LDAK_Thin_MAIN --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

         
    

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm --out MAIN_GREML"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model"...')
            command = "./gcta --bfile SUBSET_L1 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML1; ./gcta --bfile SUBSET_L2 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML2; ./gcta --bfile SUBSET_L3 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML3; ./gcta --bfile SUBSET_L4 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML4; ./gcta --bfile SUBSET_L5 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML5; ./gcta --bfile SUBSET_L6 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML6; ./gcta --bfile SUBSET_L7 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML7; ./gcta --bfile SUBSET_L8 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML8; ./gcta --bfile SUBSET_L9 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML9; ./gcta --bfile SUBSET_L10 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML10; ./gcta --bfile SUBSET_L11 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML11; ./gcta  --bfile SUBSET_L12 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML12; ./gcta --bfile SUBSET_L13 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML13; ./gcta --bfile SUBSET_L14 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML14; ./gcta --bfile SUBSET_L15 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML15; ./gcta  --bfile SUBSET_L16 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML16; ./gcta --bfile SUBSET_L17 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML17; ./gcta --bfile SUBSET_L18 --autosome --autosome-num 100 --make-grm-inbred --out SUBSET_GREML18; ./gcta --bfile MAIN --autosome --autosome-num 100 --make-grm-inbred --out MAIN_GREML"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

            


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --qcovar qCovar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --covar Covar_greml --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates"...')
                command = "./gcta --reml --pheno SUBSET_L1.fam --mpheno 4 --grm SUBSET_GREML1 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML1; ./gcta --reml --pheno SUBSET_L2.fam --mpheno 4 --grm SUBSET_GREML2 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML2; ./gcta --reml --pheno SUBSET_L3.fam --mpheno 4 --grm SUBSET_GREML3 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML3; ./gcta --reml --pheno SUBSET_L4.fam --mpheno 4 --grm SUBSET_GREML4 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML4; ./gcta --reml --pheno SUBSET_L5.fam --mpheno 4 --grm SUBSET_GREML5 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML5; ./gcta --reml --pheno SUBSET_L6.fam --mpheno 4 --grm SUBSET_GREML6 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML6; ./gcta --reml --pheno SUBSET_L7.fam --mpheno 4 --grm SUBSET_GREML7 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML7; ./gcta --reml --pheno SUBSET_L8.fam --mpheno 4 --grm SUBSET_GREML8 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML8; ./gcta --reml --pheno SUBSET_L9.fam --mpheno 4 --grm SUBSET_GREML9 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML9; ./gcta --reml --pheno SUBSET_L10.fam --mpheno 4 --grm SUBSET_GREML10 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML10; ./gcta --reml --pheno SUBSET_L11.fam --mpheno 4 --grm SUBSET_GREML11 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML11; ./gcta --reml --pheno SUBSET_L12.fam --mpheno 4 --grm SUBSET_GREML12 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML12; ./gcta --reml --pheno SUBSET_L13.fam --mpheno 4 --grm SUBSET_GREML13 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML13; ./gcta --reml --pheno SUBSET_L14.fam --mpheno 4 --grm SUBSET_GREML14 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML14; ./gcta --reml --pheno SUBSET_L15.fam --mpheno 4 --grm SUBSET_GREML15 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML15; ./gcta --reml --pheno SUBSET_L16.fam --mpheno 4 --grm SUBSET_GREML16 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML16; ./gcta --reml --pheno SUBSET_L17.fam --mpheno 4 --grm SUBSET_GREML17 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML17; ./gcta --reml --pheno SUBSET_L18.fam --mpheno 4 --grm SUBSET_GREML18 --reml-maxit 1000 --autosome-num 100 --out SUBSET_GREML18; ./gcta --reml --pheno MAIN.fam --mpheno 4  --grm MAIN_GREML --reml-maxit 1000 --autosome-num 100 --out MAIN_GREML"

                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)




                







print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1.reml")
if file.exists ():
    with open("SUBSET_E1.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2.reml")
if file.exists ():
    with open("SUBSET_E2.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3.reml")
if file.exists ():
    with open("SUBSET_E3.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4.reml")
if file.exists ():
    with open("SUBSET_E4.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5.reml")
if file.exists ():
    with open("SUBSET_E5.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6.reml")
if file.exists ():
    with open("SUBSET_E6.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7.reml")
if file.exists ():
    with open("SUBSET_E7.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8.reml")
if file.exists ():
    with open("SUBSET_E8.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9.reml")
if file.exists ():
    with open("SUBSET_E9.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10.reml")
if file.exists ():
    with open("SUBSET_E10.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11.reml")
if file.exists ():
    with open("SUBSET_E11.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12.reml")
if file.exists ():
    with open("SUBSET_E12.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13.reml")
if file.exists ():
    with open("SUBSET_E13.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14.reml")
if file.exists ():
    with open("SUBSET_E14.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15.reml")
if file.exists ():
    with open("SUBSET_E15.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16.reml")
if file.exists ():
    with open("SUBSET_E16.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17.reml")
if file.exists ():
    with open("SUBSET_E17.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18.reml")
if file.exists ():
    with open("SUBSET_E18.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E.reml")
if file.exists ():
    with open("MAIN_E.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E', 'a') as out_file:
        out_file.write(str(last_line))







if Prog2.exists ():
    my_file = Path("SUBSET_L1.progress")
    if my_file.is_file():
        L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1.progress')


    my_file = Path("SUBSET_L2.progress")
    if my_file.is_file():
        L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2.progress')


    my_file = Path("SUBSET_L3.progress")
    if my_file.is_file():
        L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3.progress')


    my_file = Path("SUBSET_L4.progress")
    if my_file.is_file():
        L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4.progress')


    my_file = Path("SUBSET_L5.progress")
    if my_file.is_file():
        L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5.progress')

    
    my_file = Path("SUBSET_L6.progress")
    if my_file.is_file():
        L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6.progress')


    my_file = Path("SUBSET_L7.progress")
    if my_file.is_file():
        L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7.progress')


    my_file = Path("SUBSET_L8.progress")
    if my_file.is_file():
        L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8.progress')


    my_file = Path("SUBSET_L9.progress")
    if my_file.is_file():
        L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9.progress')


    my_file = Path("SUBSET_L10.progress")
    if my_file.is_file():
        L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10.progress')


    my_file = Path("SUBSET_L11.progress")
    if my_file.is_file():
        L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11.progress')



    my_file = Path("SUBSET_L12.progress")
    if my_file.is_file():
        L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12.progress')


    my_file = Path("SUBSET_L13.progress")
    if my_file.is_file():
        L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13.progress')


    my_file = Path("SUBSET_L14.progress")
    if my_file.is_file():
        L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14.progress')


    my_file = Path("SUBSET_L15.progress")
    if my_file.is_file():
        L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15.progress')



    my_file = Path("SUBSET_L16.progress")
    if my_file.is_file():
        L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16.progress')



    my_file = Path("SUBSET_L17.progress")
    if my_file.is_file():
        L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17.progress')



    my_file = Path("SUBSET_L18.progress")
    if my_file.is_file():
        L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18.progress')



    my_file = Path("MAIN_L.progress")
    if my_file.is_file():
        L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L.progress')




        
    L1 = pd.read_csv("SUBSET_L1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2 = pd.read_csv("SUBSET_L2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3 = pd.read_csv("SUBSET_L3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4 = pd.read_csv("SUBSET_L4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5 = pd.read_csv("SUBSET_L5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6 = pd.read_csv("SUBSET_L6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7 = pd.read_csv("SUBSET_L7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8 = pd.read_csv("SUBSET_L8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9 = pd.read_csv("SUBSET_L9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10 = pd.read_csv("SUBSET_L10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11 = pd.read_csv("SUBSET_L11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12 = pd.read_csv("SUBSET_L12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13 = pd.read_csv("SUBSET_L13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14 = pd.read_csv("SUBSET_L14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15 = pd.read_csv("SUBSET_L15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16 = pd.read_csv("SUBSET_L16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17 = pd.read_csv("SUBSET_L17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18 = pd.read_csv("SUBSET_L18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN = pd.read_csv("MAIN_L.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_L1 = L1['Her_All']
    SUBSET_reml_L2 = L2['Her_All']
    SUBSET_reml_L3 = L3['Her_All']
    SUBSET_reml_L4 = L4['Her_All']
    SUBSET_reml_L5 = L5['Her_All']
    SUBSET_reml_L6 = L6['Her_All']
    SUBSET_reml_L7 = L7['Her_All']
    SUBSET_reml_L8 = L8['Her_All']
    SUBSET_reml_L9 = L9['Her_All']
    SUBSET_reml_L10 = L10['Her_All']
    SUBSET_reml_L11 = L11['Her_All']
    SUBSET_reml_L12 = L12['Her_All']
    SUBSET_reml_L13 = L13['Her_All']
    SUBSET_reml_L14 = L14['Her_All']
    SUBSET_reml_L15 = L15['Her_All']
    SUBSET_reml_L16 = L16['Her_All']
    SUBSET_reml_L17 = L17['Her_All']
    SUBSET_reml_L18 = L18['Her_All']
    MAIN_reml_L = L_MAIN['Her_All']

    SUBSET_reml_L1.to_csv('SUBSET_reml_L1.csv', header=False, index=False)
    SUBSET_reml_L2.to_csv('SUBSET_reml_L2.csv', header=False, index=False)
    SUBSET_reml_L3.to_csv('SUBSET_reml_L3.csv', header=False, index=False)
    SUBSET_reml_L4.to_csv('SUBSET_reml_L4.csv', header=False, index=False)
    SUBSET_reml_L5.to_csv('SUBSET_reml_L5.csv', header=False, index=False)
    SUBSET_reml_L6.to_csv('SUBSET_reml_L6.csv', header=False, index=False)
    SUBSET_reml_L7.to_csv('SUBSET_reml_L7.csv', header=False, index=False)
    SUBSET_reml_L8.to_csv('SUBSET_reml_L8.csv', header=False, index=False)
    SUBSET_reml_L9.to_csv('SUBSET_reml_L9.csv', header=False, index=False)
    SUBSET_reml_L10.to_csv('SUBSET_reml_L10.csv', header=False, index=False)
    SUBSET_reml_L11.to_csv('SUBSET_reml_L11.csv', header=False, index=False)
    SUBSET_reml_L12.to_csv('SUBSET_reml_L12.csv', header=False, index=False)
    SUBSET_reml_L13.to_csv('SUBSET_reml_L13.csv', header=False, index=False)
    SUBSET_reml_L14.to_csv('SUBSET_reml_L14.csv', header=False, index=False)
    SUBSET_reml_L15.to_csv('SUBSET_reml_L15.csv', header=False, index=False)
    SUBSET_reml_L16.to_csv('SUBSET_reml_L16.csv', header=False, index=False)
    SUBSET_reml_L17.to_csv('SUBSET_reml_L17.csv', header=False, index=False)
    SUBSET_reml_L18.to_csv('SUBSET_reml_L18.csv', header=False, index=False)
    MAIN_reml_L.to_csv('MAIN_reml_L.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_L1.csv")
if file.exists ():
    with open("SUBSET_reml_L1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2.csv")
if file.exists ():
    with open("SUBSET_reml_L2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3.csv")
if file.exists ():
    with open("SUBSET_reml_L3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4.csv")
if file.exists ():
    with open("SUBSET_reml_L4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5.csv")
if file.exists ():
    with open("SUBSET_reml_L5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6.csv")
if file.exists ():
    with open("SUBSET_reml_L6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7.csv")
if file.exists ():
    with open("SUBSET_reml_L7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8.csv")
if file.exists ():
    with open("SUBSET_reml_L8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9.csv")
if file.exists ():
    with open("SUBSET_reml_L9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10.csv")
if file.exists ():
    with open("SUBSET_reml_L10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11.csv")
if file.exists ():
    with open("SUBSET_reml_L11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12.csv")
if file.exists ():
    with open("SUBSET_reml_L12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13.csv")
if file.exists ():
    with open("SUBSET_reml_L13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14.csv")
if file.exists ():
    with open("SUBSET_reml_L14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15.csv")
if file.exists ():
    with open("SUBSET_reml_L15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16.csv")
if file.exists ():
    with open("SUBSET_reml_L16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17.csv")
if file.exists ():
    with open("SUBSET_reml_L17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18.csv")
if file.exists ():
    with open("SUBSET_reml_L18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L.csv")
if file.exists ():
    with open("MAIN_reml_L.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L', 'a') as out_file:
        out_file.write(str(last_line))














if Prog2.exists ():
    my_file = Path("SUBSET_LT1.progress")
    if my_file.is_file():
        LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1.progress')


    my_file = Path("SUBSET_LT2.progress")
    if my_file.is_file():
        LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2.progress')


    my_file = Path("SUBSET_LT3.progress")
    if my_file.is_file():
        LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3.progress')


    my_file = Path("SUBSET_LT4.progress")
    if my_file.is_file():
        LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4.progress')


    my_file = Path("SUBSET_LT5.progress")
    if my_file.is_file():
        LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5.progress')

    
    my_file = Path("SUBSET_LT6.progress")
    if my_file.is_file():
        LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6.progress')


    my_file = Path("SUBSET_LT7.progress")
    if my_file.is_file():
        LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7.progress')


    my_file = Path("SUBSET_LT8.progress")
    if my_file.is_file():
        LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8.progress')


    my_file = Path("SUBSET_LT9.progress")
    if my_file.is_file():
        LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9.progress')


    my_file = Path("SUBSET_LT10.progress")
    if my_file.is_file():
        LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10.progress')


    my_file = Path("SUBSET_LT11.progress")
    if my_file.is_file():
        LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11.progress')



    my_file = Path("SUBSET_LT12.progress")
    if my_file.is_file():
        LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12.progress')


    my_file = Path("SUBSET_LT13.progress")
    if my_file.is_file():
        LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13.progress')


    my_file = Path("SUBSET_LT14.progress")
    if my_file.is_file():
        LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14.progress')


    my_file = Path("SUBSET_LT15.progress")
    if my_file.is_file():
        LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15.progress')



    my_file = Path("SUBSET_LT16.progress")
    if my_file.is_file():
        LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16.progress')



    my_file = Path("SUBSET_LT17.progress")
    if my_file.is_file():
        LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17.progress')



    my_file = Path("SUBSET_LT18.progress")
    if my_file.is_file():
        LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18.progress')



    my_file = Path("MAIN_LT.progress")
    if my_file.is_file():
        LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT.progress')




        
    LT1 = pd.read_csv("SUBSET_LT1.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2 = pd.read_csv("SUBSET_LT2.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3 = pd.read_csv("SUBSET_LT3.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4 = pd.read_csv("SUBSET_LT4.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5 = pd.read_csv("SUBSET_LT5.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6 = pd.read_csv("SUBSET_LT6.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7 = pd.read_csv("SUBSET_LT7.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8 = pd.read_csv("SUBSET_LT8.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9 = pd.read_csv("SUBSET_LT9.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10 = pd.read_csv("SUBSET_LT10.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11 = pd.read_csv("SUBSET_LT11.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12 = pd.read_csv("SUBSET_LT12.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13 = pd.read_csv("SUBSET_LT13.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14 = pd.read_csv("SUBSET_LT14.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15 = pd.read_csv("SUBSET_LT15.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16 = pd.read_csv("SUBSET_LT16.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17 = pd.read_csv("SUBSET_LT17.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18 = pd.read_csv("SUBSET_LT18.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN = pd.read_csv("MAIN_LT.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1 = LT1['Her_All']
    SUBSET_reml_LT2 = LT2['Her_All']
    SUBSET_reml_LT3 = LT3['Her_All']
    SUBSET_reml_LT4 = LT4['Her_All']
    SUBSET_reml_LT5 = LT5['Her_All']
    SUBSET_reml_LT6 = LT6['Her_All']
    SUBSET_reml_LT7 = LT7['Her_All']
    SUBSET_reml_LT8 = LT8['Her_All']
    SUBSET_reml_LT9 = LT9['Her_All']
    SUBSET_reml_LT10 = LT10['Her_All']
    SUBSET_reml_LT11 = LT11['Her_All']
    SUBSET_reml_LT12 = LT12['Her_All']
    SUBSET_reml_LT13 = LT13['Her_All']
    SUBSET_reml_LT14 = LT14['Her_All']
    SUBSET_reml_LT15 = LT15['Her_All']
    SUBSET_reml_LT16 = LT16['Her_All']
    SUBSET_reml_LT17 = LT17['Her_All']
    SUBSET_reml_LT18 = LT18['Her_All']
    MAIN_reml_LT = LT_MAIN['Her_All']

    SUBSET_reml_LT1.to_csv('SUBSET_reml_LT1.csv', header=False, index=False)
    SUBSET_reml_LT2.to_csv('SUBSET_reml_LT2.csv', header=False, index=False)
    SUBSET_reml_LT3.to_csv('SUBSET_reml_LT3.csv', header=False, index=False)
    SUBSET_reml_LT4.to_csv('SUBSET_reml_LT4.csv', header=False, index=False)
    SUBSET_reml_LT5.to_csv('SUBSET_reml_LT5.csv', header=False, index=False)
    SUBSET_reml_LT6.to_csv('SUBSET_reml_LT6.csv', header=False, index=False)
    SUBSET_reml_LT7.to_csv('SUBSET_reml_LT7.csv', header=False, index=False)
    SUBSET_reml_LT8.to_csv('SUBSET_reml_LT8.csv', header=False, index=False)
    SUBSET_reml_LT9.to_csv('SUBSET_reml_LT9.csv', header=False, index=False)
    SUBSET_reml_LT10.to_csv('SUBSET_reml_LT10.csv', header=False, index=False)
    SUBSET_reml_LT11.to_csv('SUBSET_reml_LT11.csv', header=False, index=False)
    SUBSET_reml_LT12.to_csv('SUBSET_reml_LT12.csv', header=False, index=False)
    SUBSET_reml_LT13.to_csv('SUBSET_reml_LT13.csv', header=False, index=False)
    SUBSET_reml_LT14.to_csv('SUBSET_reml_LT14.csv', header=False, index=False)
    SUBSET_reml_LT15.to_csv('SUBSET_reml_LT15.csv', header=False, index=False)
    SUBSET_reml_LT16.to_csv('SUBSET_reml_LT16.csv', header=False, index=False)
    SUBSET_reml_LT17.to_csv('SUBSET_reml_LT17.csv', header=False, index=False)
    SUBSET_reml_LT18.to_csv('SUBSET_reml_LT18.csv', header=False, index=False)
    MAIN_reml_LT.to_csv('MAIN_reml_LT.csv', header=False, index=False)



file = pathlib.Path("SUBSET_reml_LT1.csv")
if file.exists ():
    with open("SUBSET_reml_LT1.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2.csv")
if file.exists ():
    with open("SUBSET_reml_LT2.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3.csv")
if file.exists ():
    with open("SUBSET_reml_LT3.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4.csv")
if file.exists ():
    with open("SUBSET_reml_LT4.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5.csv")
if file.exists ():
    with open("SUBSET_reml_LT5.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6.csv")
if file.exists ():
    with open("SUBSET_reml_LT6.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7.csv")
if file.exists ():
    with open("SUBSET_reml_LT7.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8.csv")
if file.exists ():
    with open("SUBSET_reml_LT8.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9.csv")
if file.exists ():
    with open("SUBSET_reml_LT9.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10.csv")
if file.exists ():
    with open("SUBSET_reml_LT10.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11.csv")
if file.exists ():
    with open("SUBSET_reml_LT11.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12.csv")
if file.exists ():
    with open("SUBSET_reml_LT12.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13.csv")
if file.exists ():
    with open("SUBSET_reml_LT13.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14.csv")
if file.exists ():
    with open("SUBSET_reml_LT14.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15.csv")
if file.exists ():
    with open("SUBSET_reml_LT15.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16.csv")
if file.exists ():
    with open("SUBSET_reml_LT16.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17.csv")
if file.exists ():
    with open("SUBSET_reml_LT17.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18.csv")
if file.exists ():
    with open("SUBSET_reml_LT18.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT.csv")
if file.exists ():
    with open("MAIN_reml_LT.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT', 'a') as out_fileT:
        out_fileT.write(str(last_line))













if Prog3.exists ():
    my_file = Path("SUBSET_GREML1.hsq")
    if my_file.is_file():
        G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1.hsq')


    my_file = Path("SUBSET_GREML2.hsq")
    if my_file.is_file():
        G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2.hsq')


    my_file = Path("SUBSET_GREML3.hsq")
    if my_file.is_file():
        G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3.hsq')


    my_file = Path("SUBSET_GREML4.hsq")
    if my_file.is_file():
        G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4.hsq')


    my_file = Path("SUBSET_GREML5.hsq")
    if my_file.is_file():
        G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5.hsq')

    
    my_file = Path("SUBSET_GREML6.hsq")
    if my_file.is_file():
        G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6.hsq')


    my_file = Path("SUBSET_GREML7.hsq")
    if my_file.is_file():
        G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7.hsq')


    my_file = Path("SUBSET_GREML8.hsq")
    if my_file.is_file():
        G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8.hsq')


    my_file = Path("SUBSET_GREML9.hsq")
    if my_file.is_file():
        G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9.hsq')


    my_file = Path("SUBSET_GREML10.hsq")
    if my_file.is_file():
        G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10.hsq')


    my_file = Path("SUBSET_GREML11.hsq")
    if my_file.is_file():
        G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11.hsq')



    my_file = Path("SUBSET_GREML12.hsq")
    if my_file.is_file():
        G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12.hsq')


    my_file = Path("SUBSET_GREML13.hsq")
    if my_file.is_file():
        G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13.hsq')


    my_file = Path("SUBSET_GREML14.hsq")
    if my_file.is_file():
        G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14.hsq')


    my_file = Path("SUBSET_GREML15.hsq")
    if my_file.is_file():
        G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15.hsq')



    my_file = Path("SUBSET_GREML16.hsq")
    if my_file.is_file():
        G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16.hsq')



    my_file = Path("SUBSET_GREML17.hsq")
    if my_file.is_file():
        G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17.hsq')



    my_file = Path("SUBSET_GREML18.hsq")
    if my_file.is_file():
        G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18.hsq')



    my_file = Path("MAIN_GREML.hsq")
    if my_file.is_file():
        G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML.hsq')


    G1 = pd.read_csv("SUBSET_GREML1.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2 = pd.read_csv("SUBSET_GREML2.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3 = pd.read_csv("SUBSET_GREML3.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4 = pd.read_csv("SUBSET_GREML4.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5 = pd.read_csv("SUBSET_GREML5.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6 = pd.read_csv("SUBSET_GREML6.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7 = pd.read_csv("SUBSET_GREML7.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8 = pd.read_csv("SUBSET_GREML8.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9 = pd.read_csv("SUBSET_GREML9.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10 = pd.read_csv("SUBSET_GREML10.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11 = pd.read_csv("SUBSET_GREML11.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12 = pd.read_csv("SUBSET_GREML12.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13 = pd.read_csv("SUBSET_GREML13.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14 = pd.read_csv("SUBSET_GREML14.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15 = pd.read_csv("SUBSET_GREML15.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16 = pd.read_csv("SUBSET_GREML16.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17 = pd.read_csv("SUBSET_GREML17.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18 = pd.read_csv("SUBSET_GREML18.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN = pd.read_csv("MAIN_GREML.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1 = G1['Variance']
    SUBSET_reml_G2 = G2['Variance']
    SUBSET_reml_G3 = G3['Variance']
    SUBSET_reml_G4 = G4['Variance']
    SUBSET_reml_G5 = G5['Variance']
    SUBSET_reml_G6 = G6['Variance']
    SUBSET_reml_G7 = G7['Variance']
    SUBSET_reml_G8 = G8['Variance']
    SUBSET_reml_G9 = G9['Variance']
    SUBSET_reml_G10 = G10['Variance']
    SUBSET_reml_G11 = G11['Variance']
    SUBSET_reml_G12 = G12['Variance']
    SUBSET_reml_G13 = G13['Variance']
    SUBSET_reml_G14 = G14['Variance']
    SUBSET_reml_G15 = G15['Variance']
    SUBSET_reml_G16 = G16['Variance']
    SUBSET_reml_G17 = G17['Variance']
    SUBSET_reml_G18 = G18['Variance']
    MAIN_reml_G = G_MAIN['Variance']



    SUBSET_reml_G1.to_csv('SUBSET_reml_G1.csv', header=False, index=False)
    SUBSET_reml_G2.to_csv('SUBSET_reml_G2.csv', header=False, index=False)
    SUBSET_reml_G3.to_csv('SUBSET_reml_G3.csv', header=False, index=False)
    SUBSET_reml_G4.to_csv('SUBSET_reml_G4.csv', header=False, index=False)
    SUBSET_reml_G5.to_csv('SUBSET_reml_G5.csv', header=False, index=False)
    SUBSET_reml_G6.to_csv('SUBSET_reml_G6.csv', header=False, index=False)
    SUBSET_reml_G7.to_csv('SUBSET_reml_G7.csv', header=False, index=False)
    SUBSET_reml_G8.to_csv('SUBSET_reml_G8.csv', header=False, index=False)
    SUBSET_reml_G9.to_csv('SUBSET_reml_G9.csv', header=False, index=False)
    SUBSET_reml_G10.to_csv('SUBSET_reml_G10.csv', header=False, index=False)
    SUBSET_reml_G11.to_csv('SUBSET_reml_G11.csv', header=False, index=False)
    SUBSET_reml_G12.to_csv('SUBSET_reml_G12.csv', header=False, index=False)
    SUBSET_reml_G13.to_csv('SUBSET_reml_G13.csv', header=False, index=False)
    SUBSET_reml_G14.to_csv('SUBSET_reml_G14.csv', header=False, index=False)
    SUBSET_reml_G15.to_csv('SUBSET_reml_G15.csv', header=False, index=False)
    SUBSET_reml_G16.to_csv('SUBSET_reml_G16.csv', header=False, index=False)
    SUBSET_reml_G17.to_csv('SUBSET_reml_G17.csv', header=False, index=False)
    SUBSET_reml_G18.to_csv('SUBSET_reml_G18.csv', header=False, index=False)
    MAIN_reml_G.to_csv('MAIN_reml_G.csv', header=False, index=False)





file = pathlib.Path("SUBSET_reml_G1.csv")
if file.exists ():
    with open("SUBSET_reml_G1.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2.csv")
if file.exists ():
    with open("SUBSET_reml_G2.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3.csv")
if file.exists ():
    with open("SUBSET_reml_G3.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4.csv")
if file.exists ():
    with open("SUBSET_reml_G4.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5.csv")
if file.exists ():
    with open("SUBSET_reml_G5.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6.csv")
if file.exists ():
    with open("SUBSET_reml_G6.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7.csv")
if file.exists ():
    with open("SUBSET_reml_G7.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8.csv")
if file.exists ():
    with open("SUBSET_reml_G8.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9.csv")
if file.exists ():
    with open("SUBSET_reml_G9.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10.csv")
if file.exists ():
    with open("SUBSET_reml_G10.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11.csv")
if file.exists ():
    with open("SUBSET_reml_G11.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12.csv")
if file.exists ():
    with open("SUBSET_reml_G12.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13.csv")
if file.exists ():
    with open("SUBSET_reml_G13.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14.csv")
if file.exists ():
    with open("SUBSET_reml_G14.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15.csv")
if file.exists ():
    with open("SUBSET_reml_G15.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16.csv")
if file.exists ():
    with open("SUBSET_reml_G16.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17.csv")
if file.exists ():
    with open("SUBSET_reml_G17.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18.csv")
if file.exists ():
    with open("SUBSET_reml_G18.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G.csv")
if file.exists ():
    with open("MAIN_reml_G.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G', 'a') as out_fileG:
        out_fileG.write(str(line4))



time.sleep(10)
 




print(' "Printing Heritability Bar_Graphs"...')


with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data = []
            with open("outfile_E", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_E', 'w') as fp:
                for i in data:
                    fp.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fe1:
                x_e=np.genfromtxt(fe1)
            with open('outfileY_E','r') as fe2:
                y_e=np.genfromtxt(fe2)
        

            MAX_E0 = max(y_e)
            print(MAX_E0)
            MAX_E1 =round(MAX_E0,2)

            MAX_E2 = MAX_E0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchE = mpatches.Patch(color='red', label=MAX_E1)
                               
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_e)
            for n,val in enumerate(y_e):
                if val==MAX_E0:
                    cc[n]='red'
                elif val<MAX_E0:
                    cc[n]='green'

            plt.bar(x_e, y_e, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_E2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchE], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)

            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data = []
            with open("outfile_L", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_L', 'w') as fpl:
                for i in data:
                    fpl.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fl1:
                x_l=np.genfromtxt(fl1)
            with open('outfileY_L','r') as fl2:
                y_l=np.genfromtxt(fl2)


            MAX_L0 = max(y_l)
            print(MAX_L0)
            MAX_L1 =round(MAX_L0,2)
            MAX_L2 = MAX_L0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchL = mpatches.Patch(color='red', label=MAX_L1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_l)
            for n,val in enumerate(y_l):
                if val==MAX_L0:
                    cc[n]='red'
                elif val<MAX_L0:
                    cc[n]='green'

            plt.bar(x_l, y_l, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_L2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


        
    


with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data = []
            with open("outfile_LT", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_LT', 'w') as fp2:
                for i in data:
                    fp2.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as ft1:
                x_lt=np.genfromtxt(ft1)
            with open('outfileY_LT','r') as ft2:
                y_lt=np.genfromtxt(ft2)


            MAX_LT0 = max(y_lt)
            print(MAX_LT0)
            MAX_LT1 =round(MAX_LT0,2)
            MAX_LT2 = MAX_LT0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_LT1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lt)
            for n,val in enumerate(y_lt):
                if val==MAX_LT0:
                    cc[n]='red'
                elif val<MAX_LT0:
                    cc[n]='green'

            plt.bar(x_lt, y_lt, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_LT2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
    
    


        


with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
            
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data = []
            with open("outfile_G", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data.append(currentPlace)

            with open(r'outfileY_G', 'w') as fp3:
                for i in data:
                    fp3.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as fg1:
                x_lg=np.genfromtxt(fg1)
            with open('outfileY_G','r') as fg3:
                y_lg=np.genfromtxt(fg3)


            MAX_G0 = max(y_lg)
            print(MAX_G0)
            MAX_G1 =round(MAX_G0,2)
            MAX_G2 = MAX_G0 + 10

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

            red_patchLT = mpatches.Patch(color='red', label=MAX_G1)
    
            plt.rc('axes', axisbelow=True)

            cc=['colors']*len(y_lg)
            for n,val in enumerate(y_lg):
                if val==MAX_G0:
                    cc[n]='red'
                elif val<MAX_G0:
                    cc[n]='green'

            plt.bar(x_lg, y_lg, tick_label = tick_label, 

                    width = 0.6, color = cc) 
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(np.arange(0, MAX_G2, step=10), fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18) 
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[red_patchLT], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
    
            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)

 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")
if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        data = []
        with open('outfileX','r') as fg1000:
            x_l000g=np.genfromtxt(fg1000)
        with open('Number_of_pvalues','r') as fg3000:
            y_l000g=np.genfromtxt(fg3000)


            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
            plt.rc('axes', axisbelow=True)


            plt.bar(x_l000g, y_l000g, tick_label = tick_label, 

                    width = 0.6, color = 'skyblue')
    
            plt.xticks(rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('Association p-value', fontsize=18)
            plt.ylabel('Number of SNP hits', fontsize=18)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.yscale('log',base=10)
            plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(3)
        

            
print('Printing Bar_Graphs done')



file_outfileY_E = pathlib.Path("outfileY_E")
file_outfileY_L = pathlib.Path("outfileY_L")
file_outfileY_LT = pathlib.Path("outfileY_LT")
file_outfileY_G = pathlib.Path("outfileY_G")
file_Number_of_pvalues = pathlib.Path("Number_of_pvalues")

if file_outfileY_E.exists () or file_outfileY_L.exists () or file_outfileY_G.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E.exists ():
        print('The heritability profiling using Emmax model is saved as outfileE, outfileY_E, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L.exists ():
        print('The heritability profiling using LDAK GCTA_model is saved as outfileL, outfileY_L, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT.exists ():
        print('The heritability profiling using LDAK Thin_model is saved as outfileLT, outfileY_LT, & Heritability_Bar_Graph_LT')


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G.exists ():
                print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G, outfileY_G, & Heritability_Bar_Graph_G')

if No_sss == No_pvalues:
    if file_Number_of_pvalues.exists ():
        print('Clustered SNP hits are saved as Number_of_pvalues & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')


command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

                

command = "rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


                
command = "rm Phenotype; rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir RP6_SAFE-h2_input_files; mkdir RP6_SAFE-h2_output_files; mkdir RP6_SAFE-h2_output_figures; mv MAIN.fam RP6_SAFE-h2_input_files; mv MainPs* RP6_SAFE-h2_input_files; mv outfile_* RP6_SAFE-h2_output_files; mv outfileY* RP6_SAFE-h2_output_files; mv Number_of* RP6_SAFE-h2_output_files; mv list* RP6_SAFE-h2_output_files; mv *.pdf RP6_SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mv *Covar* SAFE-h2_input_files; mv MAIN.bim SAFE-h2_input_files; mv MAIN.bed SAFE-h2_input_files"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



command = "rm SUBSET_E*.BN.kinf; rm MAIN_E.BN.kinf; rm *.id; rm *.bin; rm *.progress; rm *.details; rm *.adjust; rm *.trivial; rm *.out; rm *.in; rm *.thin; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

command = "rm Prog*_select_act.txt"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())








Prog1_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog1_select_act = Prog1_select['Impl_status_Emmax']
Prog1_select_act.to_csv('Prog1_select_act.txt', header=False, index=False)

Prog2_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog2_select_act = Prog2_select['Impl_status_LdakGCTA']
Prog2_select_act.to_csv('Prog2_select_act.txt', header=False, index=False)

Prog3_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog3_select_act = Prog3_select['Impl_status_LdakThin']
Prog3_select_act.to_csv('Prog3_select_act.txt', header=False, index=False)

Prog4_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog4_select_act = Prog4_select['Impl_status_GCTA-GREML']
Prog4_select_act.to_csv('Prog4_select_act.txt', header=False, index=False)

Prog6_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Test_ADOH", "PURE_Effects"])
Prog6_select_act = Prog6_select['PURE_Effects']
Prog6_select_act.to_csv('Prog6_select_act.txt', header=False, index=False)


        
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                if Prog1.exists ():
                    command = "cp RP6_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E6; cp RP5_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E5; cp RP4_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E4; cp RP3_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E3; cp RP2_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E2; cp RP1_SAFE-h2_output_files/outfileY_E .; ren outfileY_E outfileY_E1; cp SAFE-h2_output_files/outfileY_E ."
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())
                    
with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        df1 = pd.read_csv("outfileY_E1", header=None, sep='\t',)
        df2 = pd.read_csv("outfileY_E2", header=None, sep='\t',)
        df3 = pd.read_csv("outfileY_E3", header=None, sep='\t',)
        df4 = pd.read_csv("outfileY_E4", header=None, sep='\t',)
        df5 = pd.read_csv("outfileY_E5", header=None, sep='\t',)
        df6 = pd.read_csv("outfileY_E6", header=None, sep='\t',)


with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                outfileY_E16 = pd.concat([df1, df2, df3, df4, df5, df6], axis=1)
                outfileY_E16.to_csv("outfileY_E16",index=False, header=None, sep='\t',)

                outfileY_E16['meanvalue'] = outfileY_E16.mean(axis=1)
                E1616 = outfileY_E16.to_csv(columns=['meanvalue'],index=False, header=None)

                with open('E16', 'w', newline='') as E16:
                    E16.write(E1616)


                outfileY_E16['errorvalue'] = outfileY_E16.std(axis=1)
                Eerror = outfileY_E16.to_csv(columns=['errorvalue'],index=False, header=None)

                with open('E16_error', 'w', newline='') as E16:
                    E16.write(Eerror)

    




with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                if Prog3.exists ():
                    command = "cp RP6_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G6; cp RP5_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G5; cp RP4_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G4; cp RP3_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G3; cp RP2_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G2; cp RP1_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G1; cp SAFE-h2_output_files/outfileY_G ."
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

                    
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        df1 = pd.read_csv("outfileY_G1", header=None, sep='\t',)
        df2 = pd.read_csv("outfileY_G2", header=None, sep='\t',)
        df3 = pd.read_csv("outfileY_G3", header=None, sep='\t',)
        df4 = pd.read_csv("outfileY_G4", header=None, sep='\t',)
        df5 = pd.read_csv("outfileY_G5", header=None, sep='\t',)
        df6 = pd.read_csv("outfileY_G6", header=None, sep='\t',)

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                outfileY_G16 = pd.concat([df1, df2, df3, df4, df5, df6], axis=1)
                outfileY_G16.to_csv("outfileY_G16",index=False, header=None, sep='\t',)

                outfileY_G16['meanvalue'] = outfileY_G16.mean(axis=1)
                G1616 = outfileY_G16.to_csv(columns=['meanvalue'],index=False, header=None)

                with open('G16', 'w', newline='') as G16:
                    G16.write(G1616)


                outfileY_G16['errorvalue'] = outfileY_G16.std(axis=1)
                Gerror = outfileY_G16.to_csv(columns=['errorvalue'],index=False, header=None)

                with open('G16_error', 'w', newline='') as G16:
                    G16.write(Gerror)



with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                if Prog3.exists ():
                    command = "cp RP6_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G6; cp RP5_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G5; cp RP4_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G4; cp RP3_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G3; cp RP2_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G2; cp RP1_SAFE-h2_output_files/outfileY_G .; ren outfileY_G outfileY_G1; cp SAFE-h2_output_files/outfileY_G ."
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())
                    
with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        df1 = pd.read_csv("outfileY_G1", header=None, sep='\t',)
        df2 = pd.read_csv("outfileY_G2", header=None, sep='\t',)
        df3 = pd.read_csv("outfileY_G3", header=None, sep='\t',)
        df4 = pd.read_csv("outfileY_G4", header=None, sep='\t',)
        df5 = pd.read_csv("outfileY_G5", header=None, sep='\t',)
        df6 = pd.read_csv("outfileY_G6", header=None, sep='\t',)

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                outfileY_G16 = pd.concat([df1, df2, df3, df4, df5, df6], axis=1)
                outfileY_G16.to_csv("outfileY_G16",index=False, header=None, sep='\t',)

                outfileY_G16['meanvalue'] = outfileY_G16.mean(axis=1)
                G1616 = outfileY_G16.to_csv(columns=['meanvalue'],index=False, header=None)

                with open('G16', 'w', newline='') as G16:
                    G16.write(G1616)


                outfileY_G16['errorvalue'] = outfileY_G16.std(axis=1)
                Gerror = outfileY_G16.to_csv(columns=['errorvalue'],index=False, header=None)

                with open('G16_error', 'w', newline='') as G16:
                    G16.write(Gerror)


























with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                if Prog2.exists ():
                    command = "cp RP6_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L6; cp RP5_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L5; cp RP4_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L4; cp RP3_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L3; cp RP2_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L2; cp RP1_SAFE-h2_output_files/outfileY_L .; ren outfileY_L outfileY_L1; cp SAFE-h2_output_files/outfileY_L ."
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())
                    
with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        df1 = pd.read_csv("outfileY_L1", header=None, sep='\t',)
        df2 = pd.read_csv("outfileY_L2", header=None, sep='\t',)
        df3 = pd.read_csv("outfileY_L3", header=None, sep='\t',)
        df4 = pd.read_csv("outfileY_L4", header=None, sep='\t',)
        df5 = pd.read_csv("outfileY_L5", header=None, sep='\t',)
        df6 = pd.read_csv("outfileY_L6", header=None, sep='\t',)



with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                outfileY_L16 = pd.concat([df1, df2, df3, df4, df5, df6], axis=1)
                outfileY_L16.to_csv("outfileY_L16",index=False, header=None, sep='\t',)

                outfileY_L16['meanvalue'] = outfileY_L16.mean(axis=1)
                L1616 = outfileY_L16.to_csv(columns=['meanvalue'],index=False, header=None)

                with open('L16', 'w', newline='') as L16:
                    L16.write(L1616)


                outfileY_L16['errorvalue'] = outfileY_L16.std(axis=1)
                Lerror = outfileY_L16.to_csv(columns=['errorvalue'],index=False, header=None)

                with open('L16_error', 'w', newline='') as L16:
                    L16.write(Lerror)






with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog3_select_act.txt", "a+") as ActC:
            ActC.seek(0) # set position to start of file
            lineC = ActC.read().splitlines()
            if valueC in lineC:
                if Prog2.exists ():
                    command = "cp RP6_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT6; cp RP5_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT5; cp RP4_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT4; cp RP3_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT3; cp RP2_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT2; cp RP1_SAFE-h2_output_files/outfileY_LT .; ren outfileY_LT outfileY_LT1; cp SAFE-h2_output_files/outfileY_LT ."
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())




with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        df1 = pd.read_csv("outfileY_LT1", header=None, sep='\t',)
        df2 = pd.read_csv("outfileY_LT2", header=None, sep='\t',)
        df3 = pd.read_csv("outfileY_LT3", header=None, sep='\t',)
        df4 = pd.read_csv("outfileY_LT4", header=None, sep='\t',)
        df5 = pd.read_csv("outfileY_LT5", header=None, sep='\t',)
        df6 = pd.read_csv("outfileY_LT6", header=None, sep='\t',)

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog3_select_act.txt", "a+") as ActC:
            ActC.seek(0) # set position to start of file
            lineC = ActC.read().splitlines()
            if valueC in lineC:
                outfileY_LT16 = pd.concat([df1, df2, df3, df4, df5, df6], axis=1)
                outfileY_LT16.to_csv("outfileY_LT16",index=False, header=None, sep='\t',)

                outfileY_LT16['meanvalue'] = outfileY_LT16.mean(axis=1)
                LT1616 = outfileY_LT16.to_csv(columns=['meanvalue'],index=False, header=None)

                with open('LT16', 'w', newline='') as LT16:
                    LT16.write(LT1616)


                outfileY_LT16['errorvalue'] = outfileY_LT16.std(axis=1)
                LTerror = outfileY_LT16.to_csv(columns=['errorvalue'],index=False, header=None)

                with open('LT16_error', 'w', newline='') as LT16:
                    LT16.write(LTerror)





        
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                x = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00']

                with open('outfileY_E','r') as fe2:
                    y_e=np.genfromtxt(fe2)


                with open('E16','r') as fe3:
                    y_e16=np.genfromtxt(fe3)
    
                with open('E16_error','r') as fe4:
                    Eerror=np.genfromtxt(fe4)
    


                fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
                fig.subplots_adjust(hspace=0.2)
                ax0.errorbar(x, y_e, fmt='-o')
                ax0.set_title('variable, Original-Phenotype', fontsize=10)

                ax1.errorbar(x, y_e16, yerr=Eerror, color='red', fmt='-o')
                ax1.set_title('variable, Random-Phenotypes', fontsize=10)

                ax0.set_ylabel('SNP heritability (%)', fontsize=10)
                ax1.set_xlabel('p-value of the allocated SNPs', fontsize=10)
                ax1.set_ylabel('Average SNP heritability (%)', fontsize=10)

                


                ax0.yaxis.grid(True, which='major')
                ax1.yaxis.grid(True, which='major')

                for tick in ax1.get_xticklabels():
                    tick.set_rotation_mode('default')
                for tick in ax1.get_xticklabels():
                    tick.set_rotation(60)

                plt.savefig('Heritability_Bar_Graph_E-purifiedEffects.pdf',bbox_inches='tight')
                plt.close()
                plt.close('1')
                plt.close('2')
                plt.close('all')
                time.sleep(2)







with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                x = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00']

                with open('outfileY_G','r') as fe2:
                    y_e=np.genfromtxt(fe2)


                with open('G16','r') as fe3:
                    y_e16=np.genfromtxt(fe3)
    
                with open('G16_error','r') as fe4:
                    Eerror=np.genfromtxt(fe4)
    


                fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
                fig.subplots_adjust(hspace=0.2)
                ax0.errorbar(x, y_e, fmt='-o')
                ax0.set_title('variable, Original-Phenotype', fontsize=10)

                ax1.errorbar(x, y_e16, yerr=Eerror, color='red', fmt='-o')
                ax1.set_title('variable, Random-Phenotypes', fontsize=10)

                ax0.set_ylabel('SNP heritability (%)', fontsize=10)
                ax1.set_xlabel('p-value of the allocated SNPs', fontsize=10)
                ax1.set_ylabel('Average SNP heritability (%)', fontsize=10)

      


                ax0.yaxis.grid(True, which='major')
                ax1.yaxis.grid(True, which='major')

                for tick in ax1.get_xticklabels():
                    tick.set_rotation_mode('default')
                for tick in ax1.get_xticklabels():
                    tick.set_rotation(60)

                plt.savefig('Heritability_Bar_Graph_G-purifiedEffects.pdf',bbox_inches='tight')
                plt.close()
                plt.close('1')
                plt.close('2')
                plt.close('all')
                time.sleep(2)



with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                x = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00']

                with open('outfileY_G','r') as fe2:
                    y_e=np.genfromtxt(fe2)


                with open('G16','r') as fe3:
                    y_e16=np.genfromtxt(fe3)
    
                with open('G16_error','r') as fe4:
                    Eerror=np.genfromtxt(fe4)
    


                fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
                fig.subplots_adjust(hspace=0.2)
                ax0.errorbar(x, y_e, fmt='-o')
                ax0.set_title('variable, Original-Phenotype', fontsize=10)

                ax1.errorbar(x, y_e16, yerr=Eerror, color='red', fmt='-o')
                ax1.set_title('variable, Random-Phenotypes', fontsize=10)

                ax0.set_ylabel('SNP heritability (%)', fontsize=10)
                ax1.set_xlabel('p-value of the allocated SNPs', fontsize=10)
                ax1.set_ylabel('Average SNP heritability (%)', fontsize=10)

                
                


                ax0.yaxis.grid(True, which='major')
                ax1.yaxis.grid(True, which='major')

                for tick in ax1.get_xticklabels():
                    tick.set_rotation_mode('default')
                for tick in ax1.get_xticklabels():
                    tick.set_rotation(60)

                plt.savefig('Heritability_Bar_Graph_G-purifiedEffects.pdf',bbox_inches='tight')
                plt.close('1')
                plt.close('2')
                plt.close('all')
                time.sleep(2)

                

                

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                x = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00']

                with open('outfileY_L','r') as fe2:
                    y_e=np.genfromtxt(fe2)


                with open('L16','r') as fe3:
                    y_e16=np.genfromtxt(fe3)
    
                with open('L16_error','r') as fe4:
                    Eerror=np.genfromtxt(fe4)
    


                fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
                fig.subplots_adjust(hspace=0.2)
                ax0.errorbar(x, y_e, fmt='-o')
                ax0.set_title('variable, Original-Phenotype', fontsize=10)

                ax1.errorbar(x, y_e16, yerr=Eerror, color='red', fmt='-o')
                ax1.set_title('variable, Random-Phenotypes', fontsize=10)

                ax0.set_ylabel('SNP heritability (%)', fontsize=10)
                ax1.set_xlabel('p-value of the allocated SNPs', fontsize=10)
                ax1.set_ylabel('Average SNP heritability (%)', fontsize=10)

                

                ax0.yaxis.grid(True, which='major')
                ax1.yaxis.grid(True, which='major')

                for tick in ax1.get_xticklabels():
                    tick.set_rotation_mode('default')
                for tick in ax1.get_xticklabels():
                    tick.set_rotation(60)

                plt.savefig('Heritability_Bar_Graph_L-purifiedEffects.pdf',bbox_inches='tight')
                plt.close('1')
                plt.close('2')
                plt.close('all')
                time.sleep(2)




        
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        with open("Prog3_select_act.txt", "a+") as ActC:
            ActC.seek(0) # set position to start of file
            lineC = ActC.read().splitlines()
            if valueC in lineC:
                x = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00']

                with open('outfileY_LT','r') as fe2:
                    y_e=np.genfromtxt(fe2)


                with open('LT16','r') as fe3:
                    y_e16=np.genfromtxt(fe3)
    
                with open('LT16_error','r') as fe4:
                    Eerror=np.genfromtxt(fe4)
    


                fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
                fig.subplots_adjust(hspace=0.2)
                ax0.errorbar(x, y_e, fmt='-o')
                ax0.set_title('variable, Original-Phenotype', fontsize=10)

                ax1.errorbar(x, y_e16, yerr=Eerror, color='red', fmt='-o')
                ax1.set_title('variable, Random-Phenotypes', fontsize=10)

                ax0.set_ylabel('SNP heritability (%)', fontsize=10)
                ax1.set_xlabel('p-value of the allocated SNPs', fontsize=10)
                ax1.set_ylabel('Average SNP heritability (%)', fontsize=10)

                


                ax0.yaxis.grid(True, which='major')
                ax1.yaxis.grid(True, which='major')

                for tick in ax1.get_xticklabels():
                    tick.set_rotation_mode('default')
                for tick in ax1.get_xticklabels():
                    tick.set_rotation(60)

                plt.savefig('Heritability_Bar_Graph_LT-purifiedEffects.pdf',bbox_inches='tight')
                plt.close('1')
                plt.close('2')
                plt.close('all')
                time.sleep(2)


time.sleep(5)


with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        command = "mkdir RP1_6_SAFE-h2_output_files; mkdir RP1_6_SAFE-h2_output_figures; mv outfileY_E RP1_6_SAFE-h2_output_files; mv outfileY_E1 RP1_6_SAFE-h2_output_files; mv outfileY_E2 RP1_6_SAFE-h2_output_files; mv outfileY_E3 RP1_6_SAFE-h2_output_files; mv outfileY_E4 RP1_6_SAFE-h2_output_files; mv outfileY_E5 RP1_6_SAFE-h2_output_files; mv outfileY_E6 RP1_6_SAFE-h2_output_files; mv outfileY_E16 RP1_6_SAFE-h2_output_files; mv E16 RP1_6_SAFE-h2_output_files; mv E16_error RP1_6_SAFE-h2_output_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())
              
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        command = "mv outfileY_G RP1_6_SAFE-h2_output_files; mv outfileY_G1 RP1_6_SAFE-h2_output_files; mv outfileY_G2 RP1_6_SAFE-h2_output_files; mv outfileY_G3 RP1_6_SAFE-h2_output_files; mv outfileY_G4 RP1_6_SAFE-h2_output_files; mv outfileY_G5 RP1_6_SAFE-h2_output_files; mv outfileY_G6 RP1_6_SAFE-h2_output_files; mv outfileY_G16 RP1_6_SAFE-h2_output_files; mv G16 RP1_6_SAFE-h2_output_files; mv G16_error RP1_6_SAFE-h2_output_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())
              
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        command = "mv outfileY_L RP1_6_SAFE-h2_output_files; mv outfileY_L1 RP1_6_SAFE-h2_output_files; mv outfileY_L2 RP1_6_SAFE-h2_output_files; mv outfileY_L3 RP1_6_SAFE-h2_output_files; mv outfileY_L4 RP1_6_SAFE-h2_output_files; mv outfileY_L5 RP1_6_SAFE-h2_output_files; mv outfileY_L6 RP1_6_SAFE-h2_output_files; mv outfileY_L16 RP1_6_SAFE-h2_output_files; mv L16 RP1_6_SAFE-h2_output_files; mv L16_error RP1_6_SAFE-h2_output_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())
              
with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        command = "mv outfileY_LT RP1_6_SAFE-h2_output_files; mv outfileY_LT1 RP1_6_SAFE-h2_output_files; mv outfileY_LT2 RP1_6_SAFE-h2_output_files; mv outfileY_LT3 RP1_6_SAFE-h2_output_files; mv outfileY_LT4 RP1_6_SAFE-h2_output_files; mv outfileY_LT5 RP1_6_SAFE-h2_output_files; mv outfileY_LT6 RP1_6_SAFE-h2_output_files; mv outfileY_LT16 RP1_6_SAFE-h2_output_files; mv LT16 RP1_6_SAFE-h2_output_files; mv LT16_error RP1_6_SAFE-h2_output_files"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

with open("Prog6_select_act.txt", "a+") as ActF:
    ActF.seek(0) # set position to start of file
    lineF = ActF.read().splitlines()
    if valueFff in lineF:
        command = "mv Heritability_Bar_Graph_LT-purifiedEffects.pdf RP1_6_SAFE-h2_output_figures; mv Heritability_Bar_Graph_L-purifiedEffects.pdf RP1_6_SAFE-h2_output_figures; mv Heritability_Bar_Graph_G-purifiedEffects.pdf RP1_6_SAFE-h2_output_figures; mv Heritability_Bar_Graph_E-purifiedEffects.pdf RP1_6_SAFE-h2_output_figures"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())
              

command = "rm Prog*_select_act.txt"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



              
final = pyfiglet.figlet_format('SAFE-h2', font='doom', width=100)
print(f'[white]{final}[/white]')

print('"has completed the analyses. The SAFE-h2 version is 2023a."')

print('SAFE-h2 Citation: Behrooz Darbani, Mogens Nicolaisen. SNP Allocation For Estimating Heritability (SAFE-h2): A tool to explore genomic origins of phenotypes for estimation of SNP heritability using additive-only allelic effects or additive and non-additive allelic effects.')

print('PLINK Citation: GigaScience 2015Dec;4(1):s13742-015-0047-8 (doi:https://doi.org/10.1186/s13742-015-0047-8)')

print('Also cite Nat Genet.2010Apr;42(4):348-54.doi:10.1038/ng.548 ... if using EMMAX model')
print('Also cite Am J Hum Genet.2012Dec7;91(6):1011-21.doi:10.1016/j.ajhg.2012.10.010 ... if using LDAK models')
print('Also cite Nat Genet.2010Jul;42(7):565-9.doi:10.1038/ng.608 ... if using GCTA-GREML model')
exit()
exit()












